#Binary Search - Iteratif
def binarySearch_iteratif(array, x):
  left, right = 0, len(array) - 1

  while left <= right:
    mid = (left + right) // 2

    if array[mid] == x:
      return mid
    elif array[mid] < x:
      left = mid + 1
    else:
      right = mid - 1

  return -1

#Binary Search - Rekursif
def binarySearch_rekursif(array, x, left, right):
  if left > right:
    return -1
  else:
    mid = (left + right) // 2

  if array[mid] == x:
    return mid
  elif array[mid] < x:
    return binarySearch_rekursif(array, x, mid + 1, right)
  else:
    return binarySearch_rekursif(array, x, left, mid - 1)

#Bubble Sort - Iteratif
def bubbleSort(array):
  x = len(array)
  for i in range(x):
    for j in range(0, x-i-1):
      if array[j] > array[j+1] :
        array[j], array[j+1] = array[j+1], array[j]

#Bubble Sort - Rekursif
def bubbleSort_rekursif(array, x):
  if x == 1:
    return array
  for i in range(x-1):
    if array[i] > array[i+1]:
      array[i], array[i+1] = array[i+1], array[i]
  return bubbleSort_rekursif(array, x-1)

#Studi Kasus 1: Inventaris Barang
inventaris = ["Laptop", "Keyboard", "Mouse", "Monitor", "Printer", "Scanner", "Tablet"]
inventaris.sort()  # Mengurutkan daftar inventaris
print("Inventaris (terurut):", inventaris)

#Barang yang ingin dicari
itemcari = "Mouse"

#Binary Search Iteratif --
index_iter = binarySearch_iteratif(inventaris, itemcari)
if index_iter != -1:
  print(f"Iteratif: Barang '{itemcari}' ditemukan di indeks {index_iter}")
else:
  print(f"Iteratif: Barang '{itemcari}' tidak ditemukan.")

#Binary Search Rekursif --
index_rekursif = binarySearch_rekursif(inventaris, itemcari, 0, len(inventaris) - 1)
if index_rekursif != -1:
  print(f"Rekursif: Barang '{itemcari}' ditemukan di indeks {index_rekursif}")
else:
  print(f"Rekursif: Barang '{itemcari}' tidak ditemukan.")

#Hitung jumlah kemunculan item
jumlah_kemunculan = inventaris.count(itemcari)
print(f"Barang '{itemcari}' muncul sebanyak {jumlah_kemunculan} kali.")

# Studi Kasus 2: Skor Ujian Siswa
skor_ujian = [78, 92, 85, 63, 99, 71, 88, 76]
print("\nSkor sebelum diurutkan:", skor_ujian)

skor_baru = 82
skor_ujian.append(skor_baru)
print(f"Skor setelah menambahkan skor baru ({skor_baru}):", skor_ujian)

# Bubble Sort Iteratif
swap_count = 0  # Hitung jumlah pertukaran
for i in range(len(skor_ujian) - 1):
  for j in range(len(skor_ujian) - i - 1):
    if skor_ujian[j] > skor_ujian[j + 1]:
      skor_ujian[j], skor_ujian[j + 1] = skor_ujian[j + 1], skor_ujian[j]
      swap_count += 1
print("Skor setelah diurutkan (Iteratif):", skor_ujian)
print("Jumlah pertukaran (Iteratif):", swap_count)

# Bubble Sort Rekursif
def bubbleSort_rekursif_kompleks(array, n):
  if n == 1:
    return
  for i in range(n - 1):
    if array[i] > array[i + 1]:
      array[i], array[i + 1] = array[i + 1], array[i]
      bubbleSort_rekursif_kompleks(array, n - 1)

skor_ujian = [78, 92, 85, 63, 99, 71, 88, 76, skor_baru]  # Reset daftar skor
bubbleSort_rekursif_kompleks(skor_ujian, len(skor_ujian))
print("Skor setelah diurutkan (Rekursif):", skor_ujian)

# Fungsi untuk mengukur waktu eksekusi
def ukur_waktu(func, *args):
    start_time = time.time()
    func(*args)
    return time.time() - start_time

# Ukuran masukan
ukuran_input = [1, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000]
waktu_bubble_sort_iteratif = []
waktu_bubble_sort_rekursif = []
waktu_binary_search_iteratif = []
waktu_binary_search_rekursif = []

# Mengukur waktu untuk Bubble Sort Iteratif dan Rekursif
for ukuran in ukuran_input:
    array = np.random.randint(0, 10000, ukuran).tolist()

    # Waktu untuk Bubble Sort Iteratif
    waktu_iteratif = ukur_waktu(bubble_sort_iteratif, array.copy())
    waktu_bubble_sort_iteratif.append(waktu_iteratif)

    # Waktu untuk Bubble Sort Rekursif
    waktu_rekursif = ukur_waktu(bubble_sort_rekursif, array.copy(), len(array))
    waktu_bubble_sort_rekursif.append(waktu_rekursif)

# Mengukur waktu untuk Binary Search
# Mengurutkan array terlebih dahulu dengan Bubble Sort Iteratif
array_terurut = np.random.randint(0, 10000, 10000).tolist()
array_terurut = bubble_sort_iteratif(array_terurut)

for ukuran in ukuran_input:
    sub_array = array_terurut[:ukuran]

    # Waktu untuk Binary Search Iteratif
    waktu_iteratif = ukur_waktu(binary_search_iteratif, sub_array, 5000)  # Cari nilai 5000
    waktu_binary_search_iteratif.append(waktu_iteratif)

    # Waktu untuk Binary Search Rekursif
    waktu_rekursif = ukur_waktu(binary_search_rekursif, sub_array, 5000, 0, len(sub_array) - 1)
    waktu_binary_search_rekursif.append(waktu_rekursif)

# Menggambar grafik
plt.figure(figsize=(12, 6))

# Bubble Sort Iteratif dan Rekursif
plt.subplot(1, 2, 1)
plt.plot(ukuran_input, waktu_bubble_sort_iteratif, label='Bubble Sort Iteratif', marker='o')
plt.plot(ukuran_input, waktu_bubble_sort_rekursif, label='Bubble Sort Rekursif', marker='o')
plt.title('Waktu Eksekusi Bubble Sort')
plt.xlabel('Ukuran Masukan')
plt.ylabel('Waktu (detik)')
plt.legend()
plt.grid()

# Binary Search Iteratif dan Rekursif
plt.subplot(1, 2, 2)
plt.plot(ukuran_input, waktu_binary_search_iteratif, label='Binary Search Iteratif', marker='o')
plt.plot(ukuran_input, waktu_binary_search_rekursif, label='Binary Search Rekursif', marker='o')
plt.title('Waktu Eksekusi Binary Search')
plt.xlabel('Ukuran Masukan')
plt.ylabel('Waktu (detik)')
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

